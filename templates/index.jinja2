<!doctype html>
<head>
    <title>UpLily</title>
    <link href="css/semantic.min.css" rel="stylesheet">
    <link href="css/uplily.css" rel="stylesheet">

    <script src="js/jquery-3.4.1.min.js"></script>

    <script src="js/semantic.min.js"></script>

</head>

<script type="text/javascript">

    function uploadFile(file, s3Data, url) {
        let xhr = new XMLHttpRequest();
        let key = null;

        $("#s3_upload_progress_uploading_step_txt").css("color", "black");
        xhr.upload.addEventListener('progress', function (event) {
            // fired every time a progress event happens, update a progress bar
            $("#s3_upload_progress_bar").progress({value : event.position, total: event.totalSize, text: {active: ''}})
        });
        xhr.open("POST", s3Data.url);

        let postData = new FormData();

        for (key in s3Data.fields) {
            postData.append(key, s3Data.fields[key]);
        }
        postData.append('file', file);

        xhr.onreadystatechange = function () {

            if (xhr.readyState === 4) {

                if (xhr.status === 200 || xhr.status === 204) {
                    $("#s3_upload_progress_uploading_step_icon").removeClass("square outline grey").addClass("checkmark green");
                    $("#s3_upload_progress_uploaded_step_icon").removeClass("square outline grey").addClass("checkmark green");
                    $("#s3_upload_progress_uploaded_step_txt").css("color", "black");
                    setTimeout(function() {
                        clearUploadDialog();
                        toggleUploadButton();},
                        1000);
                } else if (xhr.status === 302 || xhr.status === 307) {
                    // Newly created S3 buckets will respond with a 30x redirect for their first couple hours of
                    // existence. This seems to be due to backend DNS processes trailing the bucket creation.
                    // Follow the redirect
                    s3Data.url = xhr.getResponseHeader("Location");
                    uploadFile(file, s3Data, url)
                } else {
                    alert("Could not upload file. Make sure CORS settings are correct");
                    console.log(xhr.status)
                }
            }
        };

        xhr.send(postData);
    }

    function getSignedRequest(file) {

        $("#s3_upload_progress_fetch_step_txt").css("color", "black");

        let xhr = new XMLHttpRequest();
        xhr.open("GET", "/sign_s3?file_name=" + file.name + "&file_type=" + file.type);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4) {
                if (xhr.status === 200) {
                    $("#s3_upload_progress_fetch_step_icon").removeClass("square outline grey").addClass("checkmark green");
                    let response = JSON.parse(xhr.responseText);
                    uploadFile(file, response.data, response.url);
                } else {
                    alert("Could not get signed URL.");
                }
            }
        };
        xhr.send();
    }

</script>

<body>
<div class="content">
    <div class="ui main container">
        <br>
        <h1 class="ui header">UpLily file upload catcher</h1>

        A tiny server for uploading and downloading files over HTTP. Can run locally or on cloud services. <br>

        {% if message_ok is defined and message_ok is not none and message_ok|length %}
            <div class="ui positive message">
                <i class="close icon"></i>
                <div class="header">
                    {{ message_ok }}
                </div>
            </div>
        {% endif %}

        {% if message_err is defined and message_err is not none and message_err|length %}

            <div class="ui negative message">
                <i class="close icon"></i>
                <div class="header">
                    {{ message_err }}
                </div>
            </div>

        {% endif %}

        <br>
        <form action="/ul/?browser_upload=True"
              method="post"
              enctype="multipart/form-data">

            <div class="ui placeholder center aligned attached segment  upload-area">
                <div class="ui active inverted dimmer" style="display: none" id="s3_upload_progress_overlay">
                  <div class="ui indeterminate text loader">
                      <div class="ui list">
                      <div class="item">
                          <i class="ui square outline grey icon" id="s3_upload_progress_fetch_step_icon"></i>
                          <div class="content">
                            <div class="header" style="color: gray" id="s3_upload_progress_fetch_step_txt">Fetching pre-signed URL </div>
                          </div>
                      </div>
                      <div class="item">
                          <i class="ui square outline grey icon" id="s3_upload_progress_uploading_step_icon"></i>
                          <div class="content">
                        <div class="header" style="color: gray" id="s3_upload_progress_uploading_step_txt">Uploading file to S3</div>
                      </div>
                      </div>
                          <div class="item">
                          <i class="ui square outline grey icon" id="s3_upload_progress_uploaded_step_icon"></i>
                          <div class="content">
                        <div class="header" style="color: gray" id="s3_upload_progress_uploaded_step_txt">Uploading complete</div>
                      </div>
                      </div>
                    </div>
                    <div id="s3_upload_progress_bar" class="ui progress" data-value="0" data-total="100">
                      <div class="bar">
                        <div class="progress"></div>
                      </div>
                      <div class="label">Uploading Files</div>
                    </div>
                  </div>
                </div>

                <div class="ui center aligned">
                    <div class="ui top attached label">
                    <p style="color: #0d71bb; display: inline-block" >Drag and Drop</p> here or <label
                        for="embedpollfileinput"
                        class="tiny ui primary basic tiny button"
                        style="display: inline-block">select</label>
                    a file and
                    <button class="tiny ui positive basic button disabled" style="display: inline-block" id="upload_button">
                        Upload
                    </button>
                    </div>

                    <i class="huge thumbs up outline middle aligned icon" style="display: none; color: darkolivegreen" id="upload_area_thumbsup"></i>
                    <span id="file_name" style="font-family: 'Lucida Blackletter'; font-size: x-large"></span>

                </div>
                <!--This input button is hidden by CSS-->
                <input type="file" (change)="fileEvent($event)" class="inputfile" id="embedpollfileinput" name="file"/>
                <a class="ui red right corner label" id="cancel_upload" style="display:none">
                    <i class="cancel icon"></i>
                </a>

            </div>
            {% if s3_enabled is defined and s3_enabled == true %}

            <div class="ui two bottom attached buttons">
                <div class="ui blue button active" id="upload_target_local_fs"><i class="hdd icon"></i>Local FS</div>
                  <div class="or"></div>
                <div class="ui yellow basic button" id="upload_target_aws_s3"><i class="aws icon"></i>S3</div>
            </div>
            {% endif %}


        </form>

        <h3 style="color: darkgreen">Example of uploading file "local/testfile.txt" to UpLily on command line with
            curl</h3>
        <pre> curl -X POST -F 'file=@./local/testfile.txt' {{ my_server }}ul/</pre>
        <h3 style="color: darkorange">Available files to download:</h3>
            <div class="ui relaxed divided list" id="available_files_list">
                <span id="available_files_list_no_files" style="font-style: italic;">No files uploaded yet </span>
            </div>


        <br>
        <br>
        <h3 style="color: slategrey"><i class="ui github icon"></i> UpLily project, Owned by UNITY/RajMaskey <a href="https://github.com/rdpickard">Check out developer</a> 
        </h3>

        <script>
            (function () {
                document.getElementById("file_input").onchange = function () {
                    let files = document.getElementById("file_input").files;
                    let file = files[0];
                    if (!file) {
                        return alert("No file selected.");
                    }
                    getSignedRequest(file);
                };
            })();


        </script>

        <script type="text/javascript">

            let drag_and_drop_file_reference = null;
            let file_select_reference = null;
            let upload_target = null;

            $("#cancel_upload").click(function (event) {
                clearUploadDialog();
                toggleUploadButton();
            });

            // preventing page from redirecting
            $("html").on("dragover", function (e) {
                e.preventDefault();
                e.stopPropagation();
            });

            $("html").on("drop", function (e) {
                e.preventDefault();
                e.stopPropagation();
            });

            // Drag enter
            $('.upload-area').on('dragenter', function (e) {
                e.stopPropagation();
                e.preventDefault();
            });

            $('.upload-area').on('dragleave', function (e) {
                e.stopPropagation();
                e.preventDefault();
                $("#upload_area_thumbsup").hide()
                $("#file_name").show()
            });

            // Drag over
            $('.upload-area').on('dragover', function (e) {
                e.stopPropagation();
                e.preventDefault();
                $("#upload_area_thumbsup").show()
                $("#file_name").hide()
            });

            // Drop
            $('.upload-area').on('drop', function (e) {
                e.stopPropagation();
                e.preventDefault();
                $("#file_name").show()
                $("#upload_area_thumbsup").hide()

                // Unset anything done by using the Select button
                file_select_reference = null;

                drag_and_drop_file_reference = e.originalEvent.dataTransfer.files[0];

                let file_path_elements = drag_and_drop_file_reference.name.toString().split("\\");

                $("#file_name").text(file_path_elements[file_path_elements.length - 1]);
                $("#file_name").removeClass("outline");
                toggleUploadButton()
            });

            // When the user selects a file, get the file name and display it on the page
            document.getElementById('embedpollfileinput').onchange = function () {
                // Unset any files specified by drag-and-drop
                drag_and_drop_file_reference = null;
                file_select_reference = this.files[0];
                let file_path_elements = this.value.toString().split("\\");
                $("#file_name").text(file_path_elements[file_path_elements.length - 1]);
                $("#file_name").removeClass("outline");
                toggleUploadButton()
            };

            function toggleUploadButton() {
                // Enables or disables the 'Upload' button depending on if there a file specified
                if (drag_and_drop_file_reference == null && file_select_reference == null) {
                    $("#upload_button").addClass("disabled");
                    $("#upload_button").addClass("basic")
                    $("#cancel_upload").hide()
                } else {
                    $("#upload_button").removeClass("disabled");
                    $("#upload_button").removeClass("basic")
                    $("#cancel_upload").show()

                }
            }

            $("#upload_button").click(function (event) {

                let file_reference = null;
                event.preventDefault();

                if (drag_and_drop_file_reference != null) {
                        file_reference = drag_and_drop_file_reference
                    } else if (file_select_reference != null) {
                        file_reference = file_select_reference
                    } else {
                        // No file selected, don't make the AJAX call
                        return;
                    }

                if (upload_target == null || upload_target === "upload_target_local_fs") {
                    let fd = new FormData();
                    fd.append("file", file_reference)
                    $.ajax({
                        url: '/ul/',
                        type: 'post',
                        data: fd,
                        contentType: false,
                        processData: false
                    })
                        .done(function () {
                            refreshAvailableFilesList();
                            clearUploadDialog()
                        })
                        .fail(function () {
                            alert("error");
                        })
                        .always(function () {

                        });
                } // end if of uploading to local fs
                else if (upload_target === "upload_target_aws_s3")
                {
                    $("#s3_upload_progress_overlay").show();
                    getSignedRequest(file_reference)
                } // end if of uploading to s3
            });

            function clearUploadDialog() {
                drag_and_drop_file_reference = null;
                file_select_reference = null;
                $("#file_name").text("");
                toggleUploadButton();

                // Hide the s3 progress spinner overlay, set all the steps back to undone
                $("#s3_upload_progress_overlay").hide();
                $("div[id^=s3_upload_progress_]").not("#s3_upload_progress_overlay").css("color", "gray");
                $("i[id^=s3_upload_progress_]").removeClass("checkmark").removeClass("green").addClass("square outline").addClass("grey")

            }

            function refreshAvailableFilesList() {
                // Add / remove elements from list of files that can be downloaded
                $.ajax({
                    url: '/available_files',
                    type: 'get',
                    dateType: "json",
                    contentType: false,
                    processData: false
                })
                    .done(function (response) {

                        let hashes_list = [];

                        // Show or hide 'no files' depending on the number of files available for download
                        if (Object.keys(response).length > 0) {
                            $("#available_files_list_no_files").hide();
                        } else {
                            $("#available_files_list_no_files").show();
                        }


                        // Check to see if any files need to be added to the list
                        for (let key in response) {
                            if (response.hasOwnProperty(key)) {
                                // Create a running list of hash values. Will use later to find elements to remove
                                hashes_list.push("a_file_"+response[key]['md5_hash']);

                                // Is there a element in the list for this file?
                                if (!$('#a_file_' + response[key]['md5_hash']).length) {
                                    $("#available_files_list").prepend(
                                        ` <div class="item" id="a_file_${ response[key]["md5_hash"] }">
                                            <i class="large circle outline middle aligned icon"></i>
                                            <div class="content">
                                            <a class="header"><a href="${ response[key]["download_url"] }">${ key }</a></a>
                                            <div class="description">Size: ${ response[key]["file_size_in_bytes"] } Bytes,
                                                MD5: ${ response[key]["md5_hash"] }</div>
                                            </div>
                                          </div>
                                       `
                                    )
                                    $('#a_file_' + response[key]['md5_hash']).transition('pulse')

                                }
                            }
                        }

                        // Check to see if any files need to be removed from the list

                        $.each( $("[id^=a_file_]"), function () {
                            if ( hashes_list.includes($(this).attr("id"))) {

                            } else {
                                $(this).remove();

                            }
                        });

                    })
                    .fail(function () {
                        console.log("refreshAvailableFilesList error");
                    })
                    .always(function () {

                    });
            }

            $("div[id^=upload_target_]").hover(
                // On rollover of unselected target visually emphasize the button, on rollout visually de-emphasize
                function() {
                    if (!$(this).hasClass("active")) {
                        $(this).removeClass("basic")
                    }
                },
                function() {
                    if (!$(this).hasClass("active")) {
                        $(this).addClass("basic")
                    }
                },
            );
            $("div[id^=upload_target_]").click(
                // On clicking an upload target button, visually de-emphasize the other targets and set the
                // clicked button as the desired target
                function() {
                    if (!$(this).hasClass("active")) {
                        $(this).removeClass("basic");
                        $(this).addClass("active");
                        $("div[id^=upload_target_]").not(this).removeClass("active").addClass("basic")
                        console.log("Seeting upload target")
                        upload_target = $(this).attr("id");
                                                console.log(upload_target)

                    }});


            $( document ).ready(function() {
                $("#cancel_upload").hide();
                refreshAvailableFilesList();
            });

            // Every 2 seconds check for the available files and update the list on the with new or removed files on
            // screen
            window.setInterval(refreshAvailableFilesList, 2000);
        </script>
    </div>
</div>
</body>
